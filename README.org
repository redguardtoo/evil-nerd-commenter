* evil-nerd-commenter (current version 1.1.0)
As a developer, I often need comment/uncomment lines for debugging or adding some short comment in the code block.

As I know, the [[http://www.vim.org/scripts/script.php?script_id=1218][Nerd Commenter]] for Vim is the most efficient way to doing this thing. Unfortunately, there is no similar plugin in Emacs.

That's why I develop this Nerd Commenter simulator for Emacs people. Besides, I'm also adding my own utilities into this plugin. For example, I added a command to comment *AND* copy lines in version 1.1.0.

Though this program could be used *independently*, I highly recommend you use it with [[http://gitorious.org/evil][evil]].

Evil makes you take advantage of power of Vi to comment lines in shocking speed. For example, you can press key `,99j` to comment out 99 lines.

* Why evil-nerd-commenter is better? 
** A simple use case on the efficiency
Say you want to comment out nine lines. Instead pressing "C-space M-9 C-n M-;", now you can press "M-9 M-;" or ",9j".

The key point is you need *NOT* mark any text to comment line(s)!

So you strike less keys than the original "M-x comment-dwim".

Here is the live demo:
[[https://raw.github.com/redguardtoo/evil-nerd-commenter/master/evil-nerd-commenter-demo.gif]]
** The commenter will ALWAYS work even the official Emacs has some bug
I'll provide long-term support for this plugin for *ANY language* in the future. Here is a example how I work around [[https://github.com/redguardtoo/evil-nerd-commenter/issues/3][a bug in autoconf.el]]. 
* Install
evil-nerd-commenter is already uploaded to [[http://marmalade-repo.org/]]. So the best way to install it is using Emacs' package manager.
* Set up
Nothing to set up.

You may add one line of emacs lisp code into ~/.emacs to let evil-nerd-commenter assign hot keys for you:
#+BEGIN_SRC lisp
(evilnc-default-hotkeys)
#+END_SRC

And *that's ALL*!

Further explanation, the content of evilnc-default-hotkeys is:
#+BEGIN_SRC lisp
(defun evilnc-default-hotkeys ()
  "Set the hotkeys of evil-nerd-comment"
  (interactive)
  (global-set-key (kbd "M-;") 'evilnc-comment-or-uncomment-lines)
  (global-set-key (kbd "M-:") 'evilnc-comment-or-uncomment-to-the-line)
  (global-set-key (kbd "C-c c") 'evilnc-copy-and-comment-lines)
  (global-set-key (kbd "C-c p") 'evilnc-comment-or-uncomment-paragraphs)
  (eval-after-load 'evil
    '(when (fboundp 'evilnc-comment-operator)
       (define-key evil-normal-state-map "," 'evilnc-comment-operator)
       (define-key evil-visual-state-map "," 'evilnc-comment-operator))))
#+END_SRC

As you can see, the default hot key for commenting lines is "M-;" when you don't use [[http://emacswiki.org/emacs/Evil][evil-mode]].
The advantage of use "M-;" is you can set mark on the first line and scroll several pages down and comment all the lines in that region by "M-;". The key point here is you save the extra two key strikes to make marked region wrap the whole content of first and last line.

I prefer vi key binds. So I also use [[http://emacswiki.org/emacs/Evil][evil-mode]].

Here is my configuration for evil-mode (*OPTIONAL!* some people don't use evil-mode at all because they don't like vi key bindings):
#+BEGIN_SRC lisp
(require 'evil)
(define-key evil-normal-state-map "," 'evilnc-comment-operator)
(define-key evil-visual-state-map "," 'evilnc-comment-operator)
#+END_SRC
* Usage
Here are available commands:
- evilnc-comment-or-uncomment-lines :: comment/uncomment lines.
- evilnc-comment-or-uncomment-to-the-line :: comment/uncomment from current line to the specified line.
- evilnc-copy-and-comment-lines :: copy and paste lines, then comment out original lines
- evilnc-comment-or-uncomment-paragraphs :: comment/uncomment paragraphs which separated by empty lines
- evilnc-toggle-comment-empty-lines :: toggle the flag to comment/uncomment empty lines

Example 1:
"C-u NUM M-x evilnc-comment-or-uncomment-lines", comment/uncomment next NUM lines.

Example 2:
Select a region and "M-x evilnc-comment-or-uncomment-lines". The region will be *automatically expanded to contain whole lines*. Then we comment/uncomment the region.

Example 3:
"C-u 56 M-x evilnc-comment-or-uncomment-to-the-line", comment/uncomment *from current line* to line 56.

Example 4:
"C-u 2 M-x evilnc-copy-and-comment-lines", copy 2 lines and paste them below the original line. Then comment out original lines. The focus will be moved to the new lines.

Example 5:
"C-u 2 M-x evilnc-comment-or-uncomment-paragraphs", comment out two paragraphs. This is useful if you have large hunk of data to be commented out:
#+BEGIN_SRC javascript
var myJson={
  "key1":"v1",
  "key2":"v2",
  "key3":"v3"
}
#+END_SRC

* Evil Usage
If you use [[http://emacswiki.org/emacs/Evil][evil-mode]], you get an operator that works with all the usual text objects and motions:

- evilnc-comment-operator :: acts much like the delete/change operator.  Takes a motion or text object and comments it out, yanking its content in the process.  

Example 1: ",," to comment out the current line.

Example 2: ",9j" to comment out the next 9 lines.

Example 3: ",99G" to comment from the current line to line 99.

Example 4: ",a(" to comment out the current s-expression, or ",i(" to only comment out the s-expression's content.  Similarly for blocks ",a{", etc.

Example 5: ",ao" to comment out the current symbol, or ",aW" to comment out the current WORD.  Could be useful when commenting out function parameters, for instance.

Example 6: ",w" comments to the beginning of the next word, ",e" to the end of the next word, ",b" to the beginning of the previous word.

* Contact me
You can report bugs at [[https://github.com/redguardtoo/evil-nerd-commenter]]. My email is <chenbin.sh@gmail.com>.
